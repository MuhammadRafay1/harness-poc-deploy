openapi: 3.1.0
info:
  title: Comprehensive OpenAPI Specification Demo
  description: |
    This OpenAPI document demonstrates **ALL** major features of the OpenAPI Specification 3.1.
    
    ## Features Included:
    - Complete info object with all metadata
    - Multiple servers with variables
    - All HTTP methods and parameter types
    - Complex request/response schemas with discriminators
    - Security schemes (API Key, OAuth2, HTTP, OpenID Connect)
    - Callbacks and webhooks
    - Links between operations
    - Comprehensive examples and documentation
    - Reusable components
    - Polymorphic schemas with discriminators
    - All schema validation properties
  version: 2.1.0
  termsOfService: https://api.example.com/terms
  contact:
    name: API Support Team
    url: https://api.example.com/support
    email: support@example.com
    x-twitter: "@exampleapi"
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
    identifier: MIT
  summary: A comprehensive API demonstrating all OpenAPI features
  x-logo:
    url: https://api.example.com/logo.png
    altText: Example API Logo
  x-api-id: comprehensive-demo-api

externalDocs:
  description: Complete API Documentation
  url: https://docs.example.com/api

servers:
  - url: https://{environment}.example.com/{basePath}/v{version}
    description: Production server with environment variables
    variables:
      environment:
        default: api
        enum: [api, staging, dev]
        description: API environment
      basePath:
        default: rest
        description: API base path
      version:
        default: "2"
        enum: ["1", "2"]
        description: API version
  - url: https://localhost:8080
    description: Local development server

tags:
  - name: users
    description: User management operations
    externalDocs:
      description: User API Guide
      url: https://docs.example.com/users
  - name: notifications
    description: Notification operations with discriminators
  - name: events
    description: Event operations with polymorphic schemas
  - name: payments
    description: Payment method operations
  - name: webhooks
    description: Webhook management
  - name: admin
    description: Administrative operations
  - name: search
    description: Universal search operations

paths:
  # Demonstrate discriminator with polymorphic notification schemas
  /notifications:
    post:
      tags: [notifications]
      summary: Send notification
      description: |
        Send different types of notifications using discriminator.
        
        This endpoint demonstrates:
        - Discriminator usage for polymorphic request bodies
        - oneOf with discriminator mapping
        - Different notification types (email, sms, push)
      operationId: sendNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
            examples:
              email_notification:
                summary: Email notification
                value:
                  type: "email"
                  recipient: "user@example.com"
                  subject: "Welcome!"
                  body: "Welcome to our service"
                  html: true
              sms_notification:
                summary: SMS notification
                value:
                  type: "sms"
                  recipient: "+1234567890"
                  message: "Your code is 123456"
              push_notification:
                summary: Push notification
                value:
                  type: "push"
                  recipient: "device_token_123"
                  title: "New Message"
                  body: "You have a new message"
                  badge: 1
      responses:
        '200':
          description: Notification sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      security:
        - OAuth2: ['write:notifications']

  # Events with discriminator for different event types
  /events:
    post:
      tags: [events]
      summary: Create event
      description: |
        Create different types of events using discriminator.
        
        Demonstrates discriminator with inheritance patterns.
      operationId: createEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            examples:
              user_event:
                summary: User registration event
                value:
                  eventType: "user"
                  timestamp: "2024-01-15T10:30:00Z"
                  userId: "user_123"
                  action: "registered"
              order_event:
                summary: Order placed event
                value:
                  eventType: "order"
                  timestamp: "2024-01-15T11:00:00Z"
                  orderId: "order_456"
                  amount: 99.99
                  currency: "USD"
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      security:
        - ApiKeyAuth: []

  # Payment methods with discriminator
  /payment-methods:
    post:
      tags: [payments]
      summary: Add payment method
      description: Add a new payment method with discriminator for different types
      operationId: addPaymentMethod
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
            examples:
              credit_card:
                summary: Credit card payment
                value:
                  type: "credit_card"
                  card_number: "4111111111111111"
                  expiry_month: 12
                  expiry_year: 2025
                  cvv: "123"
                  cardholder_name: "John Doe"
              bank_transfer:
                summary: Bank transfer payment
                value:
                  type: "bank_transfer"
                  account_number: "12345678"
                  routing_number: "021000021"
                  account_holder_name: "John Doe"
      responses:
        '201':
          description: Payment method added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
      security:
        - OAuth2: ['write:payments']

  # Demonstrate anyOf with flexible search
  /search:
    post:
      tags: [search]
      summary: Universal search
      description: |
        Perform a universal search that accepts different types of search criteria.
        
        This endpoint demonstrates:
        - anyOf usage for flexible input validation
        - Multiple valid schema combinations
        - Different search types (text, filters, advanced)
      operationId: universalSearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
            examples:
              text_search:
                summary: Simple text search
                value:
                  query: "wireless headphones"
                  limit: 10
              filter_search:
                summary: Filter-based search
                value:
                  filters:
                    category: "electronics"
                    price_range:
                      min: 50
                      max: 200
                  limit: 20
              advanced_search:
                summary: Advanced search with multiple criteria
                value:
                  query: "bluetooth"
                  filters:
                    category: "audio"
                    brand: "Sony"
                  sort_by: "price"
                  limit: 15
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      security:
        - ApiKeyAuth: []
        - {} # Allow anonymous access

  # Comprehensive user operations
  /users:
    get:
      tags: [users]
      summary: List all users
      description: |
        Retrieve a paginated list of users with comprehensive filtering.
        
        Demonstrates:
        - Query parameters with various types and styles
        - Response schemas with pagination
        - Multiple response codes and headers
        - Security requirements
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: filter
          in: query
          description: Filter users by various criteria
          required: false
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: Filter by name (partial match)
              email:
                type: string
                format: email
              status:
                type: array
                items:
                  type: string
                  enum: [active, inactive, pending]
              created_after:
                type: string
                format: date-time
        - name: sort
          in: query
          schema:
            type: string
            enum: [name_asc, name_desc, created_asc, created_desc]
            default: created_desc
        - name: X-Request-ID
          in: header
          required: false
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Successfully retrieved users
          headers:
            X-Total-Count:
              description: Total number of users
              schema:
                type: integer
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/RateLimitRemaining'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
              examples:
                default:
                  $ref: '#/components/examples/UserListExample'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security:
        - ApiKeyAuth: []
        - OAuth2: ['read:users']
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET "https://api.example.com/users?page=1&limit=10" \
              -H "Authorization: Bearer YOUR_TOKEN"
    
    post:
      tags: [users]
      summary: Create a new user
      description: Create a new user account with comprehensive validation
      operationId: createUser
      requestBody:
        description: User data for creation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              standard_user:
                $ref: '#/components/examples/CreateUserExample'
          multipart/form-data:
            schema:
              type: object
              properties:
                user_data:
                  $ref: '#/components/schemas/CreateUserRequest'
                avatar:
                  type: string
                  format: binary
              required: [user_data]
      responses:
        '201':
          description: User created successfully
          headers:
            Location:
              description: URL of the created user
              schema:
                type: string
                format: uri
              example: "/users/12345"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          links:
            GetUserById:
              $ref: '#/components/links/GetUserById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '422':
          $ref: '#/components/responses/ValidationError'
      security:
        - OAuth2: ['write:users']
      callbacks:
        userCreated:
          $ref: '#/components/callbacks/UserCreated'

  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
    
    get:
      tags: [users]
      summary: Get user by ID
      operationId: getUserById
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - OAuth2: ['read:users']
    
    patch:
      tags: [users]
      summary: Partially update user
      description: |
        Partially update a user using JSON Patch operations.
        
        Demonstrates JSON Patch content type and operations.
      operationId: patchUser
      requestBody:
        required: true
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/JsonPatchOperation'
            examples:
              update_name:
                summary: Update user name
                value:
                  - op: replace
                    path: "/name"
                    value: "New Name"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
      security:
        - OAuth2: ['write:users']
    
    delete:
      tags: [users]
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: force
          in: query
          description: Force deletion
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - OAuth2: ['delete:users']

  # File upload demonstration
  /users/{userId}/avatar:
    parameters:
      - $ref: '#/components/parameters/UserIdParam'
    
    post:
      tags: [users]
      summary: Upload user avatar
      operationId: uploadUserAvatar
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Avatar image file
                metadata:
                  type: object
                  properties:
                    alt_text:
                      type: string
              required: [avatar]
            encoding:
              avatar:
                contentType: image/png, image/jpeg, image/gif
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar_url:
                    type: string
                    format: uri
      security:
        - OAuth2: ['write:users']

  # Health check
  /health:
    get:
      tags: [monitoring]
      summary: Health check
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
      security: []

components:
  # Security Schemes - All major authentication types
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication
    
    OAuth2:
      type: oauth2
      description: OAuth2 authentication with multiple flows
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/oauth/authorize
          tokenUrl: https://auth.example.com/oauth/token
          refreshUrl: https://auth.example.com/oauth/refresh
          scopes:
            read:users: Read user information
            write:users: Create and update users
            delete:users: Delete users
            read:notifications: Read notifications
            write:notifications: Send notifications
            read:payments: Read payment methods
            write:payments: Manage payment methods
            admin:users: Administrative user operations
        clientCredentials:
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            api:access: General API access
        implicit:
          authorizationUrl: https://auth.example.com/oauth/authorize
          scopes:
            read:users: Read user information
        password:
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            read:users: Read user information
    
    HTTPBasic:
      type: http
      scheme: basic
      description: HTTP Basic authentication
    
    HTTPBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token authentication (JWT)
    
    OpenIDConnect:
      type: openIdConnect
      openIdConnectUrl: https://auth.example.com/.well-known/openid-configuration
      description: OpenID Connect authentication

  # Reusable Parameters
  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    
    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20
    
    UserIdParam:
      name: userId
      in: path
      required: true
      description: Unique identifier for a user
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_]{1,50}$'
      examples:
        uuid:
          summary: UUID format
          value: "123e4567-e89b-12d3-a456-426614174000"
        numeric:
          summary: Numeric ID
          value: "12345"

  # Reusable Headers
  headers:
    RateLimitRemaining:
      description: Number of requests remaining
      schema:
        type: integer
        minimum: 0
      example: 99

  # Comprehensive Schema Definitions with Discriminators
  schemas:
    # Polymorphic notification schemas using discriminator
    Notification:
      type: object
      description: Base notification schema with discriminator
      required: [type, recipient]
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/EmailNotification'
          sms: '#/components/schemas/SmsNotification'
          push: '#/components/schemas/PushNotification'
      oneOf:
        - $ref: '#/components/schemas/EmailNotification'
        - $ref: '#/components/schemas/SmsNotification'
        - $ref: '#/components/schemas/PushNotification'
      properties:
        type:
          type: string
          enum: [email, sms, push]
          description: Type of notification
        recipient:
          type: string
          description: Notification recipient identifier
        timestamp:
          type: string
          format: date-time
          readOnly: true
    
    EmailNotification:
      allOf:
        - $ref: '#/components/schemas/Notification'
        - type: object
          required: [subject, body]
          properties:
            type:
              type: string
              enum: [email]
            subject:
              type: string
              description: Email subject line
              minLength: 1
              maxLength: 200
            body:
              type: string
              description: Email body content
              minLength: 1
              maxLength: 10000
            html:
              type: boolean
              description: Whether body contains HTML
              default: false
    
    SmsNotification:
      allOf:
        - $ref: '#/components/schemas/Notification'
        - type: object
          required: [message]
          properties:
            type:
              type: string
              enum: [sms]
            message:
              type: string
              description: SMS message content
              minLength: 1
              maxLength: 160
    
    PushNotification:
      allOf:
        - $ref: '#/components/schemas/Notification'
        - type: object
          required: [title, body]
          properties:
            type:
              type: string
              enum: [push]
            title:
              type: string
              description: Push notification title
              minLength: 1
              maxLength: 100
            body:
              type: string
              description: Push notification body
              minLength: 1
              maxLength: 500
            badge:
              type: integer
              description: Badge count
              minimum: 0
              maximum: 999
    
    NotificationResponse:
      type: object
      required: [id, status]
      properties:
        id:
          type: string
          description: Unique notification ID
        status:
          type: string
          enum: [sent, queued, failed]
        delivery_time:
          type: string
          format: date-time
          nullable: true
    
    # Event schemas with discriminator
    Event:
      type: object
      description: Base event schema with discriminator
      required: [eventType, timestamp]
      discriminator:
        propertyName: eventType
        mapping:
          user: '#/components/schemas/UserEvent'
          order: '#/components/schemas/OrderEvent'
          system: '#/components/schemas/SystemEvent'
      oneOf:
        - $ref: '#/components/schemas/UserEvent'
        - $ref: '#/components/schemas/OrderEvent'
        - $ref: '#/components/schemas/SystemEvent'
      properties:
        eventType:
          type: string
          enum: [user, order, system]
        timestamp:
          type: string
          format: date-time
        id:
          type: string
          readOnly: true
    
    UserEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required: [userId, action]
          properties:
            eventType:
              type: string
              enum: [user]
            userId:
              type: string
            action:
              type: string
              enum: [registered, updated, deleted, login, logout]
    
    OrderEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required: [orderId, amount, currency]
          properties:
            eventType:
              type: string
              enum: [order]
            orderId:
              type: string
            amount:
              type: number
              format: decimal
              minimum: 0
              multipleOf: 0.01
            currency:
              type: string
              enum: [USD, EUR, GBP]
    
    SystemEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required: [component, severity, message]
          properties:
            eventType:
              type: string
              enum: [system]
            component:
              type: string
            severity:
              type: string
              enum: [info, warning, error, critical]
            message:
              type: string
              maxLength: 1000
    
    # Payment method schemas with discriminator
    PaymentMethod:
      type: object
      description: Payment method with discriminator
      required: [type]
      discriminator:
        propertyName: type
        mapping:
          credit_card: '#/components/schemas/CreditCardPayment'
          bank_transfer: '#/components/schemas/BankTransferPayment'
          digital_wallet: '#/components/schemas/DigitalWalletPayment'
      oneOf:
        - $ref: '#/components/schemas/CreditCardPayment'
        - $ref: '#/components/schemas/BankTransferPayment'
        - $ref: '#/components/schemas/DigitalWalletPayment'
      properties:
        type:
          type: string
          enum: [credit_card, bank_transfer, digital_wallet]
        is_default:
          type: boolean
          default: false
    
    CreditCardPayment:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          required: [card_number, expiry_month, expiry_year, cvv]
          properties:
            type:
              type: string
              enum: [credit_card]
            card_number:
              type: string
              pattern: '^[0-9]{13,19}$'
            expiry_month:
              type: integer
              minimum: 1
              maximum: 12
            expiry_year:
              type: integer
              minimum: 2024
            cvv:
              type: string
              pattern: '^[0-9]{3,4}$'
            cardholder_name:
              type: string
              maxLength: 100
    
    BankTransferPayment:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          required: [account_number, routing_number]
          properties:
            type:
              type: string
              enum: [bank_transfer]
            account_number:
              type: string
              pattern: '^[0-9]{8,17}$'
            routing_number:
              type: string
              pattern: '^[0-9]{9}$'
            account_holder_name:
              type: string
              maxLength: 100
    
    DigitalWalletPayment:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'
        - type: object
          required: [wallet_id]
          properties:
            type:
              type: string
              enum: [digital_wallet]
            wallet_id:
              type: string
            wallet_provider:
              type: string
              enum: [paypal, apple_pay, google_pay, venmo]
    
    # Search schemas demonstrating anyOf
    SearchRequest:
      type: object
      description: |
        Flexible search request that accepts different combinations of search criteria.
        
        Demonstrates anyOf - the request can be valid against any of these patterns:
        1. Text-based search with query string
        2. Filter-based search with structured filters
        3. Combined search with both query and filters
      anyOf:
        - $ref: '#/components/schemas/TextSearch'
        - $ref: '#/components/schemas/FilterSearch'
        - $ref: '#/components/schemas/CombinedSearch'
      properties:
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: Maximum number of results to return
        offset:
          type: integer
          minimum: 0
          default: 0
          description: Number of results to skip
    
    TextSearch:
      type: object
      description: Text-based search criteria
      required: [query]
      properties:
        query:
          type: string
          description: Search query string
          minLength: 1
          maxLength: 200
          example: "wireless headphones"
        sort_by:
          type: string
          enum: [relevance, price, date, rating]
          default: relevance
          description: Sort criteria for results
    
    FilterSearch:
      type: object
      description: Filter-based search criteria
      required: [filters]
      properties:
        filters:
          type: object
          description: Structured search filters
          properties:
            category:
              type: string
              description: Product category filter
              example: "electronics"
            brand:
              type: string
              description: Brand filter
              example: "Sony"
            price_range:
              type: object
              properties:
                min:
                  type: number
                  format: decimal
                  minimum: 0
                max:
                  type: number
                  format: decimal
                  minimum: 0
              description: Price range filter
            in_stock:
              type: boolean
              description: Filter for items in stock
            rating:
              type: object
              properties:
                min:
                  type: number
                  minimum: 0
                  maximum: 5
                max:
                  type: number
                  minimum: 0
                  maximum: 5
              description: Rating range filter
          additionalProperties: false
        sort_by:
          type: string
          enum: [price, date, rating, popularity]
          default: popularity
    
    CombinedSearch:
      type: object
      description: Combined text and filter search
      required: [query, filters]
      properties:
        query:
          type: string
          description: Search query string
          minLength: 1
          maxLength: 200
        filters:
          type: object
          description: Additional filters to apply
          properties:
            category:
              type: string
            brand:
              type: string
            price_range:
              type: object
              properties:
                min:
                  type: number
                  format: decimal
                  minimum: 0
                max:
                  type: number
                  format: decimal
                  minimum: 0
          additionalProperties: false
        sort_by:
          type: string
          enum: [relevance, price, date, rating, popularity]
          default: relevance
    
    SearchResponse:
      type: object
      description: Search results response
      required: [results, total, search_metadata]
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: Array of search results
        total:
          type: integer
          minimum: 0
          description: Total number of matching results
        search_metadata:
          type: object
          description: Metadata about the search operation
          properties:
            search_time_ms:
              type: integer
              minimum: 0
              description: Time taken to perform search in milliseconds
            search_type:
              type: string
              enum: [text, filter, combined]
              description: Type of search that was performed
            applied_filters:
              type: object
              description: Summary of filters that were applied
              additionalProperties: true
          required: [search_time_ms, search_type]
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      additionalProperties: false
    
    SearchResult:
      type: object
      description: Individual search result
      required: [id, title, type]
      properties:
        id:
          type: string
          description: Unique identifier for the result
        title:
          type: string
          description: Result title
        type:
          type: string
          enum: [product, user, content, document]
          description: Type of search result
        description:
          type: string
          description: Result description
          nullable: true
        url:
          type: string
          format: uri
          description: URL to the full result
          nullable: true
        score:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Relevance score (0-1)
        metadata:
          type: object
          description: Additional result-specific metadata
          additionalProperties: true
      additionalProperties: false
    
    # Contact information with anyOf for flexible input
    ContactInfo:
      type: object
      description: |
        Contact information that demonstrates anyOf for flexible validation.
        
        A contact must have at least one way to reach them, but can have multiple.
        This shows anyOf where multiple schemas can be valid simultaneously.
      anyOf:
        - required: [email]
        - required: [phone]
        - required: [address]
      properties:
        email:
          type: string
          format: email
          description: Email address
          example: "contact@example.com"
        phone:
          type: string
          format: phone
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Phone number
          example: "+1234567890"
        address:
          type: object
          description: Physical address
          properties:
            street:
              type: string
              maxLength: 200
            city:
              type: string
              maxLength: 100
            country:
              type: string
              pattern: '^[A-Z]{2}$'
          required: [street, city, country]
        preferred_method:
          type: string
          enum: [email, phone, mail]
          description: Preferred contact method
          default: email
      additionalProperties: false
    
    # User-related schemas with comprehensive validation
    User:
      type: object
      description: User account information with comprehensive validation
      required: [id, name, email, created_at]
      properties:
        id:
          type: string
          description: Unique user identifier
          readOnly: true
          examples: ["user_123", "550e8400-e29b-41d4-a716-446655440000"]
        name:
          type: string
          description: User's full name
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z\s]+$'
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          maxLength: 255
          example: "john.doe@example.com"
        phone:
          type: string
          format: phone
          description: User's phone number
          pattern: '^\+?[1-9]\d{1,14}$'
          example: "+1234567890"
          nullable: true
        avatar_url:
          type: string
          format: uri
          description: URL to user's avatar image
          nullable: true
        role:
          type: string
          enum: [user, admin, moderator]
          description: User's role in the system
          default: user
        permissions:
          type: array
          items:
            type: string
          description: List of permissions
          uniqueItems: true
          example: ["read", "write"]
        preferences:
          type: object
          description: User preferences
          properties:
            theme:
              type: string
              enum: [light, dark, auto]
              default: auto
            language:
              type: string
              pattern: '^[a-z]{2}(-[A-Z]{2})?$'
              example: "en-US"
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                  default: true
                push:
                  type: boolean
                  default: false
              additionalProperties: false
          additionalProperties: false
        metadata:
          type: object
          description: Additional user metadata
          additionalProperties: true
        status:
          type: string
          enum: [active, inactive, pending, suspended]
          description: Current user status
          default: pending
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          readOnly: true
        last_login:
          type: string
          format: date-time
          description: Last login timestamp
          readOnly: true
          nullable: true
      additionalProperties: false
    
    CreateUserRequest:
      type: object
      description: Request payload for creating a new user
      required: [name, email]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z\s]+$'
        email:
          type: string
          format: email
          maxLength: 255
        phone:
          type: string
          format: phone
          pattern: '^\+?[1-9]\d{1,14}$'
        role:
          type: string
          enum: [user, admin, moderator]
          default: user
        permissions:
          type: array
          items:
            type: string
          uniqueItems: true
      additionalProperties: false
    
    UserListResponse:
      type: object
      description: Paginated list of users
      required: [users, pagination]
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      additionalProperties: false
    
    PaginationInfo:
      type: object
      description: Pagination information
      required: [page, limit, total, has_more]
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
          minimum: 0
        has_more:
          type: boolean
        next_page:
          type: integer
          minimum: 1
          nullable: true
        prev_page:
          type: integer
          minimum: 1
          nullable: true
      additionalProperties: false
    
    # Utility schemas
    JsonPatchOperation:
      type: object
      description: JSON Patch operation (RFC 6902)
      required: [op, path]
      properties:
        op:
          type: string
          enum: [add, remove, replace, move, copy, test]
        path:
          type: string
          pattern: '^(/[^/~]*(~[01][^/~]*)*)*$'
        value:
          description: Value for add, replace, and test operations
        from:
          type: string
          pattern: '^(/[^/~]*(~[01][^/~]*)*)*$'
      additionalProperties: false
    
    HealthStatus:
      type: object
      description: API health status information
      required: [status, timestamp]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "2.1.0"
        uptime:
          type: integer
          minimum: 0
        services:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
                enum: [healthy, degraded, unhealthy]
              response_time_ms:
                type: integer
                minimum: 0
              last_check:
                type: string
                format: date-time
      additionalProperties: false
    
    # Error schemas
    Error:
      type: object
      description: Standard error response
      required: [error, message]
      properties:
        error:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "The provided data is invalid"
        details:
          description: Additional error details
          oneOf:
            - type: string
            - type: object
            - type: array
        request_id:
          type: string
          format: uuid
          description: Unique request identifier for debugging
        timestamp:
          type: string
          format: date-time
        documentation_url:
          type: string
          format: uri
      additionalProperties: false
    
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            validation_errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  code:
                    type: string
                  message:
                    type: string
                  value:
                    description: Invalid value
                required: [field, code, message]

  # Examples demonstrating discriminator usage
  examples:
    UserListExample:
      summary: Example user list response
      value:
        users:
          - id: "user_123"
            name: "John Doe"
            email: "john.doe@example.com"
            role: "user"
            status: "active"
            created_at: "2024-01-15T10:30:00Z"
        pagination:
          page: 1
          limit: 20
    
    SearchExample:
      summary: Example search request
      value:
        query: "bluetooth headphones"
        filters:
          category: "electronics"
          price_range:
            min: 50
            max: 200
        limit: 10
    
    ContactExample:
      summary: Example contact with multiple methods
      value:
        email: "john.doe@example.com"
        phone: "+1234567890"
        preferred_method: "email"
          # total: 1
          # has_more: false
    
    CreateUserExample:
      summary: Example user creation request
      value:
        name: "Jane Smith"
        email: "jane.smith@example.com"
        phone: "+1987654321"
        role: "user"

  # Links between operations
  links:
    GetUserById:
      operationId: getUserById
      parameters:
        userId: '$response.body#/id'
      description: Get the created user by ID

  # Callbacks demonstrating webhooks
  callbacks:
    UserCreated:
      '{$request.body#/webhook_url}':
        post:
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    event:
                      type: string
                      enum: [user.created]
                    data:
                      $ref: '#/components/schemas/User'
                    timestamp:
                      type: string
                      format: date-time
          responses:
            '200':
              description: Webhook received successfully

  # Reusable Response Objects
  responses:
    BadRequest:
      description: Bad request - invalid parameters or request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "BAD_REQUEST"
            message: "Invalid request parameters"
    
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "UNAUTHORIZED"
            message: "Authentication required"
      headers:
        WWW-Authenticate:
          description: Authentication scheme information
          schema:
            type: string
          example: 'Bearer realm="api"'
    
    Forbidden:
      description: Access forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "FORBIDDEN"
            message: "Insufficient permissions"
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "NOT_FOUND"
            message: "Resource not found"
    
    ValidationError:
      description: Validation error - request data is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            error: "VALIDATION_ERROR"
            message: "Request validation failed"
            validation_errors:
              - field: "email"
                code: "INVALID_FORMAT"
                message: "Email address is not valid"
                value: "invalid-email"
    
    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "RATE_LIMIT_EXCEEDED"
            message: "Too many requests"
      headers:
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/RateLimitRemaining'
        Retry-After:
          description: Number of seconds to wait before retrying
          schema:
            type: integer
          example: 60
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "INTERNAL_SERVER_ERROR"
            message: "An unexpected error occurred"